#define _CRT_SECURE_NO_WARNINGS

/*
 * PL/0 编译器
 *
 * 使用方法：
 * 运行后输入PL/0源程序文件?
 * 回答是否输出虚拟机代码
 * 回答是否输出名字表
 * fa.pcode输出虚拟机代码
 * fa1.tmp输出源文件及其各行对应的首地址
 * out.tmp输出运行结果
 * fas.tmp输出名字表
 */

#include "pl0.h"
#include "string.h"

 //运行前初始化，对保留字表 (word)、保留字表中每一个保留字对应的 symbol 类型 ( wsym )、
 //部分符号对应的 symbol 类型表 ( ssym )、类 PCODE 指令助记符表 ( mnemonic )、
 //声明开始集合 ( declbegsys )、表达式开始集合 ( statbegsys )、
 //项开始符号集合 ( facbegsys ) 以及一些全局变量的初始化
void init()
{
	jp.CycleNum = 0;
	jp.Addr = 0;
	int i;
	// ASCII 范围(0–31 控制字符, 32–126 分配给了能在键盘上找到的字符
	//数字 127 代表 DELETE 命令, 后 128 个是扩展 ASCII 打印字符) 因此共 256 个
	/* 设置单字符符号 */
	for (i = 0; i <= 255; i++)
	{
		ssym[i] = nul;
	}
	ssym['+'] = plus;
	ssym['-'] = minus;
	ssym['*'] = times;
	ssym['/'] = slash;
	ssym['('] = lparen;
	ssym[')'] = rparen;
	ssym['='] = eql;
	ssym[','] = comma;
	ssym['.'] = period;
	ssym['#'] = neq;
	ssym[';'] = semicolon;
	ssym['['] = Lsquare;
	ssym[']'] = Rsquare;
  strcpy(&(word[0][0]), "begin");

	strcpy(&(word[1][0]), "break");

	strcpy(&(word[2][0]), "call");
	strcpy(&(word[3][0]), "const");
	strcpy(&(word[4][0]), "do");
	strcpy(&(word[5][0]), "end");

	strcpy(&(word[6][0]), "for");
	strcpy(&(word[7][0]), "if");
	strcpy(&(word[8][0]), "odd");
	strcpy(&(word[9][0]), "procedure");
	strcpy(&(word[10][0]), "read");

	strcpy(&(word[11][0]), "step");

	strcpy(&(word[12][0]), "then");

	strcpy(&(word[13][0]), "until");

	strcpy(&(word[14][0]), "var");
	strcpy(&(word[15][0]), "while");
	strcpy(&(word[16][0]), "write");

	/* 设置保留字符号 */
	wsym[0] = beginsym;

	wsym[1] = breaksym;

	wsym[2] = callsym;
	wsym[3] = constsym;
	wsym[4] = dosym;
	wsym[5] = endsym;

	wsym[6] = forsym;

	wsym[7] = ifsym;
	wsym[8] = oddsym;
	wsym[9] = procsym;
	wsym[10] = readsym;

	wsym[11] = stepsym;

	wsym[12] = thensym;

	wsym[13] = untilsym;

	wsym[14] = varsym;
	wsym[15] = whilesym;
	wsym[16] = writesym;

	/* 设置指令名称 */
	strcpy(&(mnemonic[lit][0]), "lit");
	strcpy(&(mnemonic[opr][0]), "opr");
	strcpy(&(mnemonic[lod][0]), "lod");
	strcpy(&(mnemonic[sto][0]), "sto");
	strcpy(&(mnemonic[cal][0]), "cal");
	strcpy(&(mnemonic[inte][0]), "int");
	strcpy(&(mnemonic[jmp][0]), "jmp");
	strcpy(&(mnemonic[jpc][0]), "jpc");
	//数组
	strcpy(&(mnemonic[sta][0]), "sta");
	strcpy(&(mnemonic[lda][0]), "lda");

	/* 设置符号集 */
	for (i = 0; i < symnum; i++)
	{
		declbegsys[i] = false;
		statbegsys[i] = false;
		facbegsys[i] = false;
		ExpressionFollow[i] = false;
	}

	/* 设置声明开始符号集 */
	declbegsys[constsym] = true;
	declbegsys[varsym] = true;
	declbegsys[procsym] = true;

	/* 设置语句开始符号集 */
	statbegsys[beginsym] = true;
	statbegsys[callsym] = true;
	statbegsys[ifsym] = true;
	statbegsys[whilesym] = true;
	statbegsys[readsym] = true;
	statbegsys[writesym] = true;
	statbegsys[ident] = true;

	/* 设置因子开始符号集 */
	facbegsys[ident] = true;
	facbegsys[number] = true;
	facbegsys[lparen] = true;

	/* 表达式后跟符号集 */
	ExpressionFollow[semicolon] = true;
	ExpressionFollow[period] = true;
	ExpressionFollow[comma] = true;
	ExpressionFollow[rparen] = true;
	ExpressionFollow[Rsquare] = true;
	ExpressionFollow[eql] = true;
	ExpressionFollow[neq] = true;
	ExpressionFollow[geq] = true;
	ExpressionFollow[leq] = true;
	ExpressionFollow[gtr] = true;
	ExpressionFollow[lss] = true;
	ExpressionFollow[endsym] = true;
	ExpressionFollow[thensym] = true;
	ExpressionFollow[dosym] = true;
	ExpressionFollow[stepsym] = true;
	ExpressionFollow[untilsym] = true;
}
